{"entries":[{"timestamp":1725829839128,"editorVersion":"7.0.40","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function on_forever() {\n    \n})"],[0,"\n"]],"start1":0,"start2":0,"length1":46,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\",\n        \"maqueen.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":222,"start2":222,"length1":130,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.py","value":"# Imports go at the top\nfrom microbit import *\nfrom math import *\nfrom neopixel import NeoPixel\nfrom maqueen import Maqueen\n\nmq = Maqueen()\n\ndef ledrgb(n,r,g,b):\n    n=min(max(n,0),3)\n    r=min(max(r,0),255)\n    g=min(max(g,0),255)\n    b=min(max(b,0),255)\n    np=NeoPixel(pin15,4)\n    np[floor(n)]=(floor(r),floor(g),floor(b))\n    np.show()\n\nn = 100  # Number of samples in series\nperiod = 10    # Period of sampling (in milliseconds)\ngain = 10      # Gain factor\ndecay = 10 # decay of motor impulsion\nsl_n = [0] * n  # Initialize sound level list with zeros\nenergy_n = [0] * n  # Initialize energy list with zeros\nwindow_size = 10  # Window size for energy calculation\nthreshold = 1.2  # Threshold for peak detection\ni, x = 0, 0  # Initialize index\ni_pic = 0\nrunning_sum = 0  # Running sum for energy calculation\nmotor_value = 0\n\n\n# Signal avec les basses frequences\n# https://en.wikipedia.org/wiki/Low-pass_filter\nsl_low_freq = n * [0]\n# Frequence de coupure en Hz, on filtre les frequence plus petite\nfc_low = 3\nalpha_low = 2 * pi * period * fc_low / (2 * pi * period * fc_low + 1000)\nprint(alpha_low)\n\n# Signal avec les hautes frequences\n# https://en.wikipedia.org/wiki/High-pass_filter\nsl_high_freq = n * [0]\n# Frequence de coupure en Hz, on filtre les frequence plus grande\nfc_high = 100\nalpha_high = 1000 / (2 * pi * period * fc_high + 1000)\nprint(alpha_high)\n# If fc_high=fc_low\n# then alpha_high = 1 - alpha_low and the computation is the same\n\nwhile True:\n    sleep(period / 1000.0)  # Sleep for the sampling period\n    sl = microphone.sound_level() * gain  # Get sound level and apply gain\n    i = (i + 1) % n  # Update index circularly\n    prev_index = (i - 1) % n\n    prev_prev_index = (i - 2) % n\n    \n    sl_n[i] = sl  # Store the sound level\n    sl_low_freq[i] = alpha_low * sl_n[i] + (1 - alpha_low) * sl_low_freq[prev_index]\n    sl_high_freq[i] = alpha_high * sl_high_freq[prev_index] + (1 - alpha_high) * (sl_n[i] - sl_n[prev_index])\n\n    energy = 0\n    for j in range(window_size):\n        energy += sl_low_freq[(i - j) % n] ** 2  # Sum of squares of the last window_size samples\n    energy /= window_size  # Average energy over the window\n    energy_n[i] = energy  # Store the calculated energy\n\n    # Calculate the average energy of all stored energies\n    avg_energy = sum(energy_n) / n\n\n    if i > 1 and energy_n[i] > threshold * avg_energy and energy_n[prev_index] > energy_n[prev_prev_index] and energy_n[prev_index] > energy_n[i]:\n        display.show(Image.HEART)\n        i_pic = i\n        motor_value = int((energy_n[i] - threshold * avg_energy) * gain)\n    # elif i > (i_pic + 10) % n:\n    else:\n        motor_value = int(motor_value // decay)\n    # else:\n    #     motor_value = 0\n\n    mq.set_motor(0, motor_value)\n    mq.set_motor(1, -motor_value)\n    ledrgb(1, 0, motor_value, 0)\n    ledrgb(2, 0, motor_value, 0)\n"},{"type":"added","filename":"maqueen.py","value":"import microbit\nimport machine\nimport utime\nimport neopixel\n\nclass Maqueen:\n\"\"\"\nPython class for DFRobot Micro:maqueen platform\nhttps://www.dfrobot.com/product-1783.html\nAuthor: Krzysztof Sawicki <krzysztof@rssi.pl>\nLicense: GNU\n\"\"\"\ndef __init__(self):\nself.rgbleds = neopixel.NeoPixel(microbit.pin15, 4)\nprint(\"MAQUEEN initialized\")\n\ndef set_led(self, lednumber, value):\n\"\"\"\nEnable or disable the front LEDS\n0 - left LED (P8)\n1 - right LED (P12)\n\"\"\"\nif lednumber == 0:\nmicrobit.pin8.write_digital(value)\nelif lednumber == 1:\nmicrobit.pin12.write_digital(value)\n\ndef read_distance(self):\n\"\"\"\nReads distance from HC SR04 sensor\nThe result is in centimeters\nDivider is taken from Makecode library for micro:maqueen\n\"\"\"\ndivider = 42\nmaxtime = 250 * divider\nmicrobit.pin2.read_digital()  # just for setting PULL_DOWN on pin2\nmicrobit.pin1.write_digital(0)\nutime.sleep_us(2)\nmicrobit.pin1.write_digital(1)\nutime.sleep_us(10)\nmicrobit.pin1.write_digital(0)\n\nduration = machine.time_pulse_us(microbit.pin2, 1, maxtime)\ndistance = duration/divider\nreturn distance\n\ndef read_patrol(self, which):\n\"\"\"\nReads patrol sensor\n\"\"\"\nif which == 0:  # left\nreturn microbit.pin13.read_digital()\nelif which == 1:  # right\nreturn microbit.pin14.read_digital()\n\ndef set_motor(self, motor, value):\n\"\"\"\nControls motor\nmotor: 0 - left motor, 1 - right motor\nvalue: -255 to +255, the sign means direction\n\"\"\"\ndata = bytearray(3)\nif motor == 0:  # left motor\ndata[0] = 0\nelse:\ndata[0] = 2  # right motor is 2\nif value < 0:  # ccw direction\ndata[1] = 1\nvalue = -1*value\ndata[2] = value\nmicrobit.i2c.write(0x10, data, False)  # 0x10 is i2c address of motor driver\n\ndef motor_stop_all(self):\nself.set_motor(0, 0)\nself.set_motor(1, 0)"}]}],"snapshots":[{"timestamp":1725829839127,"editorVersion":"7.0.40","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"moulin-beat\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1725830163246}